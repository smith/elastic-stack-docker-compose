# [Compose file](https://docs.docker.com/reference/compose-file/) for Elastic stack
name: elastic-stack-docker-compose
configs:
  api_key_create_params.json:
    content: |
      {
        "name": "elastic-stack-docker-compose-api-key",
        "role_descriptors": {       
          "standalone_agent": { 
            "cluster": ["monitor"], 
            "indices": [{
              "names": ["logs-*-*", "metrics-*-*", "traces-*-*"], 
              "privileges": ["auto_configure", "create_doc"], 
              "allow_restricted_indices": false }],
            "applications": [],
            "run_as": [],
            "metadata": {},
            "transient_metadata": { "enabled": true }
          }
        }
      }
  apm-server.yml:
    file: config/apm-server.yml
  create-api-key.sh:
    file: scripts/create-api-key.sh
  create-certs.sh:
    file: scripts/create-certs.sh
  elasticsearch.yml:
    file: config/elasticsearch.yml
  kibana.yml:
    file: config/kibana.yml
  node.options:
    file: config/node.options
  otelcol.yml:
    file: config/otelcol/otelcol.yml
  otelcol-profiling.yml:
    file: config/otelcol/otelcol-profiling.yml
  set-kibana-system-user-password.sh:
    file: scripts/set-kibana-system-user-password.sh
  initialize-universal-profiling.sh:
    file: scripts/initialize-universal-profiling.sh
  pf-elastic-collector.yml:
    file: config/pf-elastic-collector.yml
services:
  apmserver:
    profiles: [apm]
    configs:
      - source: apm-server.yml
        target: /usr/share/apm-server/apm-server.yml
    container_name: apmserver
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    environment:
      - ELASTIC_APM_SERVER_PORT
      - ELASTIC_PASSWORD
      - ES_PORT
    hostname: host.docker.internal
    image: ${ELASTIC_APM_SERVER_IMAGE}
    ports:
      - "${ELASTIC_APM_SERVER_PORT}:${ELASTIC_APM_SERVER_PORT}"
    restart: unless-stopped
    user: 0:0
    volumes:
      - certs:/usr/share/apm-server/config/certs
      - etc:/etc/elastic
  elasticsearch:
    configs:
      - source: elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    container_name: elasticsearch
    depends_on:
      setup_certs:
        condition: service_completed_successfully
    develop:
      watch:
        - action: sync+restart
          path: config/elasticsearch.yml
          target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - ELASTIC_PASSWORD
      - cluster.name="${ES_CLUSTER_NAME}"
      - xpack.license.self_generated.type="${ES_LICENSE}"
    healthcheck:
      interval: 2s
      retries: 120
      test:
        - CMD-SHELL
        - curl -s --cacert config/certs/ca/ca.crt https://localhost:${ES_PORT} | grep -q 'missing authentication credentials'
      timeout: 10s
    hostname: host.docker.internal
    image: ${ES_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
      - ${ES_PORT}:${ES_PORT}
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
      - eslogs:/usr/share/elasticsearch/logs
  kibana:
    # TODO generate encryption keys
    configs:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
      - source: node.options
        target: /usr/share/kibana/config/node.options
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_kibana_user:
        condition: service_completed_successfully
    develop:
      watch:
        - action: sync+restart
          path: config/kibana.yml
          target: /usr/share/kibana/config/kibana.yml
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:${ES_PORT}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 120
      test:
        - CMD-SHELL
        - curl -s --cacert config/certs/ca/ca.crt https://localhost:5601/api/status
      timeout: 10s
    hostname: host.docker.internal
    image: ${KIBANA_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    restart: unless-stopped
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
      - kibana_logs:/usr/share/kibana/logs
  otelcol:
    command: --config "$EDOT_COLLECTOR_CONFIG_URL" --config /etc/otelcol/config.yml  --config /etc/elastic/api_key.yml --feature-gates=service.profilesSupport
    configs:
      - source: otelcol.yml
        target: /etc/otelcol/config.yml
    container_name: "otelcol"
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    develop:
      watch:
        - action: sync+restart
          path: config/otelcol.yml
          target: /etc/otelcol/config.yml
    environment:
      - EDOT_COLLECTOR_CONFIG_URL
      - ELASTIC_AGENT_OTEL
      - ELASTIC_API_KEY=x # This is overriden and ignored
      - ELASTIC_APM_SERVER_PORT
      - ELASTIC_ENDPOINT
      - ELASTIC_PASSWORD
      - ES_PORT
      - KIBANA_PORT
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
      - STORAGE_DIR=/usr/share/elastic-agent
    hostname: host.docker.internal
    image: ${COLLECTOR_CONTRIB_IMAGE}
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
    restart: unless-stopped
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - certs:/usr/share/elastic-agent/config/certs
      - eslogs:/usr/share/elastic-agent/logs/es
      - etc:/etc/elastic
      - kibana_logs:/usr/share/elastic-agent/logs/kibana
      - otel_registry:/usr/share/elastic-agent/otel_registry
  otelcol-profiling:
    command: --config /etc/otelcol/config.yml --feature-gates=service.profilesSupport
    configs:
      - source: otelcol-profiling.yml
        target: /etc/otelcol/config.yml
    container_name: "otelcol-profiling"
    # depends_on:
    #   otelcol:
    #     condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 200M
    environment:
      - OTEL_COLLECTOR_PORT_GRPC
    hostname: host.docker.internal
    image: ${PROFILING_COLLECTOR_CONTRIB_IMAGE}
    privileged: true
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/kernel/debug:/sys/kernel/debug:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
  setup_api_key:
    command: bash /usr/share/elasticsearch/bin/create-api-key.sh
    configs:
      - source: api_key_create_params.json
        target: /etc/elastic/api_key_create_params.json
      - mode: 0700
        source: create-api-key.sh
        target: /usr/share/elasticsearch/bin/create-api-key.sh
    container_name: "setup_api_key"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD
      - ES_PORT
    hostname: host.docker.internal
    image: pnnlmiscscripts/curl-jq
    user: "0"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - etc:/etc/elastic
  setup_certs:
    command: bash bin/create-certs.sh
    configs:
      - mode: 0700
        source: create-certs.sh
        target: /usr/share/elasticsearch/bin/create-certs.sh
    container_name: "setup_certs"
    hostname: host.docker.internal
    image: ${ES_IMAGE}
    user: "0"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
  setup_kibana_user:
    configs:
      - mode: 0700
        source: set-kibana-system-user-password.sh
        target: /bin/set-kibana-system-user-password.sh
    container_name: "setup_kibana_user"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD
      - ES_PORT
      - KIBANA_PASSWORD
    hostname: host.docker.internal
    image: pnnlmiscscripts/curl-jq
    command: bash bin/set-kibana-system-user-password.sh
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
  setup_universal_profiling:
    scale: 0
    configs:
      - mode: 0700
        source: initialize-universal-profiling.sh
        target: /bin/initialize-universal-profiling.sh
    container_name: setup_universal_profiling
    depends_on:
      kibana:
        condition: service_healthy
      setup_kibana_user:
        condition: service_completed_successfully
    environment:
      - ELASTIC_PASSWORD
      - KIBANA_PORT
    hostname: host.docker.internal
    image: pnnlmiscscripts/curl-jq
    command: bash bin/initialize-universal-profiling.sh
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
  profiling-collector:
    profiles: [profiling]
    image: ${PROFILING_COLLECTOR_IMAGE}
    container_name: profiling-collector
    restart: unless-stopped
    environment:
      - PROFILING_COLLECTOR_PORT
      - PROFILING_COLLECTOR_SECRET
      - ELASTIC_PASSWORD
      - ES_PORT
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
      setup_universal_profiling:
        condition: service_completed_successfully
    ports:
      - "${PROFILING_COLLECTOR_PORT}:${PROFILING_COLLECTOR_PORT}"
    volumes:
      - ./config/pf-elastic-collector.yml:/pf-elastic-collector.yml:ro
    command: ["-c", "/pf-elastic-collector.yml"]
  linux-vm:
    profiles: [profiling]
    image: justincormack/nsenter1
    container_name: linux-vm
    privileged: true
    pid: "host"
    depends_on:
      setup_universal_profiling:
        condition: service_completed_successfully
    stdin_open: true
    tty: true
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/kernel/debug:/sys/kernel/debug:ro
    restart: unless-stopped
    command: ["/bin/sh", "-c", "sleep infinity"]
  profiling-agent:
    profiles: [profiling]
    image: ${PROFILING_AGENT_IMAGE}
    container_name: profiling-host-agent
    depends_on:
      - linux-vm
    privileged: true
    pid: "host"
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/kernel/debug:/sys/kernel/debug:ro
    restart: unless-stopped
    command: >
      /root/pf-host-agent 
      -project-id=1 
      -secret-token=${PROFILING_COLLECTOR_SECRET}
      -collection-agent=profiling-collector:${PROFILING_COLLECTOR_PORT} 
      -disable-tls
volumes:
  bin:
    driver: local
  certs:
    driver: local
  esdata:
    driver: local
  eslogs:
    driver: local
  etc:
    driver: local
  kibana_data:
    driver: local
  kibana_logs:
    driver: local
  # See https://github.com/elastic/elastic-agent/blob/main/internal/pkg/otel/README.md#persistence-in-standalone-docker-mode
  otel_registry:
    driver: local
